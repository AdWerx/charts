  __       _    _
 / _| __ _| | _| |_ ___  _ __ _   _
| |_ / _` | |/ / __/ _ \| '__| | | |
|  _| (_| |   <| || (_) | |  | |_| |
|_|  \__,_|_|\_\\__\___/|_|   \__, |
                              |___/

{{ if .Release.IsInstall }}
Welcome to Faktory, let's get working!
{{ if .Values.license }}
You've provided a license for Faktory pro. Please ensure this is a valid license purchased from Crontribsys, LLC.
{{- else }}
You're running Faktory in development mode, which does not implement all of Faktory's features.

You can learn more about Faktory pro and licensing information here:
  https://www.mikeperham.com/2018/12/01/introducing-faktory-pro/

You can purchase a license here:
  https://billing.contribsys.com/fpro/new.cgi
{{- end }}
{{ if .Values.passwordExistingSecret }}
An existing secret named {{ .Values.passwordExistingSecret.name }} was used for the Faktory
password. Use the following command to fetch it:

  kubectl get secret --namespace {{ .Release.Namespace }} {{ .Values.passwordExistingSecret.name }} -o jsonpath="{.data.{{ .Values.passwordExistingSecret.key }}}" | base64 -D
{{- else }}
A Faktory password was generated into a secret named {{ include "faktory.name" . }}
Use the following commands to retrieve it:

  kubectl get secret --namespace {{ .Release.Namespace }} faktory -o jsonpath="{.data.password}" | base64 -D
{{- end }}
{{ if .Values.ui.enabled }}
You've enabled the UI for Faktory.
Use the following commands to access it locally:
{{ if .Values.ui.ingress.enabled }}
{{- range $host := .Values.ui.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ui.ingress.tls }}s{{ end }}://{{ $host.host }}{{ . }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort"  .Values.ui.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "faktory.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.ui.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "faktory.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "faktory.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  echo http://$SERVICE_IP:{{ .Values.ui.service.port }}
{{- else if contains "ClusterIP" .Values.ui.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "faktory.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  kubectl -n {{ .Release.Namespace }} wait --for condition=Ready --timeout=60s pod/$POD_NAME
  echo "Visit http://127.0.0.1:7421 to use your application"
  kubectl -n {{ .Release.Namespace }} port-forward pod/$POD_NAME 7421:{{ .Values.ui.service.port }}
{{- end }}
{{- end }}
{{- else }}
If you've made any changes to your Faktory configs it can take up to 1 minute or longer for the ConfigMap changes to propagate to the mounted volume in the container. Once the files change on disk, Faktory will be signaled to hot reload its configuration. Check the config-watcher container logs for more information.

If you believe this has not occurred correctly, you can signal Faktory yourself with the following:

  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "faktory.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  kubectl exec -n {{ .Release.Namespace }} -it $POD_NAME -c server -- /bin/sh -c '/bin/kill -HUP $(pidof faktory)'
{{- end }}
